---
import Logo from "../../components/Logo.svelte";
import Footer from "../../components/Footer.astro";
import "../../styles/global.css";
import Header from "../../components/Header.astro";
import SEO from "../../components/SEO.astro";

export const prerender = false;

type CMSImage = {
  url?: string;
  alt?: string;
  width?: number;
  height?: number;
};

type Entry = {
  id: number | string;
  title: string;
  slug: string;
  version?: string;
  tag?: string;
  publishedAt?: string;
  createdAt?: string;
  summary?: string;
  image?: CMSImage;
  links?: { id?: string | number; url: string }[];
  body?: any;
};

const apiBase = "https://cms.browsewithnook.com";
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect("/whats-new");
}

const res = await fetch(
  `${apiBase}/api/changelog-entries/?where[slug][equals]=${encodeURIComponent(slug)}`,
  { cache: "no-store" }
);
if (!res.ok) {
  return new Response("Not found", { status: 404 });
}
const data = (await res.json()) as { docs?: Entry[] };
const entry: Entry | undefined = Array.isArray(data?.docs)
  ? data.docs[0]
  : undefined;

if (!entry) {
  return new Response("Not found", { status: 404 });
}

function formatDate(iso?: string): string {
  if (!iso) return "";
  return new Date(iso).toLocaleDateString();
}

function sanitizeText(text: string): string {
  // Remove emojis per UI preference
  return text?.replace(/\p{Extended_Pictographic}/gu, "");
}

function renderBodyHtml(body: any): string {
  try {
    const children = body?.root?.children ?? [];
    const out: string[] = [];
    for (const node of children) {
      if (node?.type === "heading") {
        const tag = node?.tag || "h2";
        const text = (node?.children ?? [])
          .map((c: any) => sanitizeText(c?.text || ""))
          .join("");
        out.push(`<${tag}>${text}</${tag}>`);
      } else if (node?.type === "paragraph") {
        const text = (node?.children ?? [])
          .map((c: any) => {
            const t = sanitizeText(c?.text || "");
            return c?.format && c.format !== 0 ? `<strong>${t}</strong>` : t;
          })
          .join("");
        if (text.trim().length === 0) {
          out.push('<p style="height:0.5rem"></p>');
        } else {
          out.push(`<p>${text}</p>`);
        }
      }
    }
    return out.join("\n");
  } catch {
    return "";
  }
}

const bodyHtml = renderBodyHtml(entry.body);
const dateObj = new Date(entry.publishedAt ?? entry.createdAt ?? Date.now());

function monthLabel(d: Date): string {
  return d.toLocaleDateString(undefined, { month: "long", year: "numeric" });
}

function shortDay(d: Date): string {
  return d.toLocaleDateString(undefined, { month: "short", day: "numeric" });
}

function pickTag(tags: (string | undefined | null)[]): string | undefined {
  const t = tags.find(Boolean);
  return t ?? undefined;
}

function styleForTag(tag: string): string {
  const map: Record<string, string> = {
    New: "bg-[#171717] text-[#f9f8f4]",
    Fix: "bg-[#17202a] text-[#f9f8f4]",
    Improved: "bg-[#efe9d0] text-[#07140f] border border-[#e2dec7]",
  };
  return map[tag] ?? "bg-[#efe9d0] text-[#07140f] border border-[#e2dec7]";
}
---

<html
  lang="en"
  class="h-full bg-fixed bg-[length:100%_100%] bg-[linear-gradient(135deg,_#F1EFDF,_#F9F8F4)]"
>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{entry.title} — What's New</title>
    <SEO
      title={`${entry.title} — What's New`}
      description={entry.summary ?? "Nook release note."}
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Urbanist:wght@600;700;800&family=Inter:wght@400;500;600;700;800&family=Rethink+Sans:ital,wght@0,400..800;1,400..800&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="min-h-screen w-full text-[#07140f] antialiased">
    <Header />

    <section
      class="max-w-3xl mx-auto px-6 pt-20 md:pt-28 pb-14"
      data-reveal-parent
    >
      <div class="text-sm text-[#07140f]/60" data-reveal>
        <a href="/whats-new" class="hover:text-[#07140f]">Changelog</a>
        · {monthLabel(dateObj)}
      </div>
      <h1
        data-reveal
        data-reveal-delay="70"
        class="mt-2 text-[clamp(1.8rem,4.8vw,2.75rem)] font-semibold tracking-tight text-[#171717] [font-family:var(--font-rethink)]"
      >
        {entry.title}
      </h1>
      <div
        class="mt-3 flex items-center gap-3"
        data-reveal
        data-reveal-delay="120"
      >
        <time datetime={entry.publishedAt} class="text-sm text-[#07140f]/60"
          >{shortDay(dateObj)}</time
        >
        <div class="flex items-center gap-1.5">
          {
            entry.version && (
              <span class="rounded-full bg-[#476341] text-[#f9f8f4] px-2 py-0.5 text-[11px] font-semibold">
                {entry.version}
              </span>
            )
          }
          {
            pickTag([entry.tag]) && (
              <span
                class={`rounded-full px-2 py-0.5 text-[11px] font-semibold ${styleForTag(pickTag([entry.tag]) as string)}`}
              >
                {pickTag([entry.tag])}
              </span>
            )
          }
        </div>
      </div>
      {
        entry?.image?.url && (
          <figure
            class="mt-6 overflow-hidden rounded-2xl border border-[#e2dec7] bg-white/70 shadow-[0_24px_48px_-32px_rgba(7,20,15,.35)]"
            data-reveal
            data-reveal-delay="160"
          >
            <img
              src={`${apiBase}${entry.image.url}`}
              alt={entry?.image?.alt ?? entry.title}
              class="w-full"
              width={entry?.image?.width}
              height={entry?.image?.height}
              loading="eager"
            />
          </figure>
        )
      }
      {
        entry.summary && (
          <p class="mt-6 text-[15px] md:text-[16px] text-[#07140f]/85">
            {entry.summary}
          </p>
        )
      }
      <article class="changelog-body mt-6" data-reveal data-reveal-delay="180">
        {
          bodyHtml && (
            <div
              class="[&>h2]:text-xl [&>h2]:font-semibold [&>h2]:tracking-tight [&>h2]:text-[#373230] [&>p]:text-[#07140f]/80 [&>p]:leading-relaxed [&>p+*]:mt-3"
              set:html={bodyHtml}
            />
          )
        }
        {
          !bodyHtml && entry.summary && (
            <p class="text-[#07140f]/80 leading-relaxed">{entry.summary}</p>
          )
        }
      </article>
      {
        Array.isArray(entry.links) && entry.links.length > 0 && (
          <div class="mt-8" data-reveal data-reveal-delay="210">
            <h2 class="text-sm font-semibold tracking-wide text-[#07140f]/70">
              Related links
            </h2>
            <ul class="mt-2 space-y-1">
              {entry.links.map((l) => (
                <li>
                  <a
                    href={l.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-sm text-[#07140f]/80 hover:text-[#07140f]"
                  >
                    {l.url}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )
      }
      <div
        class="mt-12 border-t border-[#e2dec7] pt-6 text-sm text-[#07140f]/60"
        data-reveal
        data-reveal-delay="240"
      >
        <a href="/whats-new" class="hover:text-[#07140f]">← Back to changelog</a
        >
      </div>
    </section>

    <Footer />
  </body>
</html>
